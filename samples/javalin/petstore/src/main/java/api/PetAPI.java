/*
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: apiteam@swagger.io
 *
 * License: Apache 2.0 http://www.apache.org/licenses/LICENSE-2.0.html
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 */

package api;

import model.ApiResponse;
import java.util.ArrayList;
import io.javalin.http.BadRequestResponse;
import java.util.concurrent.CompletableFuture;
import io.javalin.http.Context;
import java.io.File;
import java.util.HashMap;
import io.javalin.Javalin;
import io.javalin.core.util.FileUtil;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import model.Pet;
import io.javalin.http.UploadedFile;
import io.javalin.websocket.WsMessageContext;

import model.Pet.StatusEnum;
import utils.Utilities;
import io.javalin.http.UnauthorizedResponse;

public abstract class PetAPI {

    private final String basePath;
    private int code = 200;

    public PetAPI(final String basePath) {
        this.basePath = Objects.requireNonNull(basePath);
    }

    protected final void setCode(final int code) {
        this.code = code;
    }

    public void registerRoutes(Javalin server) {
        server.post(this.basePath + "/pet".replace("{",":").replace("}",""), this::addPet);
        server.delete(this.basePath + "/pet/{petId}".replace("{",":").replace("}",""), this::deletePet);
        server.get(this.basePath + "/pet/findByStatus".replace("{",":").replace("}",""), this::findPetsByStatus);
        server.get(this.basePath + "/pet/findByTags".replace("{",":").replace("}",""), this::findPetsByTags); // TODO endpoint should be deleted.
        server.get(this.basePath + "/pet/{petId}".replace("{",":").replace("}",""), this::getPetById);
        server.put(this.basePath + "/pet".replace("{",":").replace("}",""), this::updatePet);
        server.post(this.basePath + "/pet/{petId}".replace("{",":").replace("}",""), this::updatePetWithForm);
        server.post(this.basePath + "/pet/{petId}/uploadImage".replace("{",":").replace("}",""), this::uploadFile);
        server.ws(this.basePath + "/Pet", ws -> {
            ws.onConnect(ctx -> System.out.println("Connected"));
            ws.onMessage(msgContext -> {
                String request = msgContext.message().split(">:")[0];
                switch (request){ 
                    case "POST/pet": addPet(msgContext);
                        break;    
                    case "DELETE/pet/{petId}": deletePet(msgContext);
                        break;    
                    case "GET/pet/findByStatus": findPetsByStatus(msgContext);
                        break;    
                    case "GET/pet/findByTags": findPetsByTags(msgContext);
                        break;    
                    case "GET/pet/{petId}": getPetById(msgContext);
                        break;    
                    case "PUT/pet": updatePet(msgContext);
                        break;    
                    case "POST/pet/{petId}": updatePetWithForm(msgContext);
                        break;    
                    case "POST/pet/{petId}/uploadImage": uploadFile(msgContext);
                        break;
                }
            });
            ws.onBinaryMessage(msgContext -> {
               byte[] data = msgContext.data();
               //TODO manage binary data
            });
            ws.onClose(ctx -> System.out.println("Connection Closed"));
            ws.onError(ctx -> System.out.println("Error occurred"));
        });
    }
    
    /**
    * Add a new pet to the store
    *
    * 
    * 
    */
    public final void addPet(Context context) {
        
        // Check request content type
        String contentType = context.contentType();
        if (contentType == null || !contentType.contains("application/json") || !contentType.contains("application/xml"))
            throw new BadRequestResponse();

        // Authentication
        
        final String flow = "implicit";
        final String authorizationURL = "https://petstore.swagger.io/oauth/authorize";
        final List<Map<String,String>> scopes = new ArrayList<>();
        Map<String, String> scope;
        scope = new HashMap<>();
        scope.put("write:pets", "modify pets in your account");
        scopes.add(scope);
        scope = new HashMap<>();
        scope.put("read:pets", "read your pets");
        scopes.add(scope);
        

        
        
        
        
        // Body
        Pet body = context.bodyValidator(Pet.class).get();
        

        context.contentType("application/json; application/xml");
        
        this.addPetLogic(body);
        

        switch (this.code) {
            case 405:
                context.result("Invalid input");
                context.status(405);
                break;
            default: 
        }

        this.code = 200;
    }

    public abstract void addPetLogic(Pet body); // TODO The method should set the responding status code by calling setCode()

    /**
    * Deletes a pet
    *
    * 
    * 
    * PathParams:
    * petId: Pet id to delete
    * 
    */
    public final void deletePet(Context context) {
        
        

        // Authentication
        
        final String flow = "implicit";
        final String authorizationURL = "https://petstore.swagger.io/oauth/authorize";
        final List<Map<String,String>> scopes = new ArrayList<>();
        Map<String, String> scope;
        scope = new HashMap<>();
        scope.put("write:pets", "modify pets in your account");
        scopes.add(scope);
        scope = new HashMap<>();
        scope.put("read:pets", "read your pets");
        scopes.add(scope);
        

        // Path params
        Long petId = context.pathParam("petId", Long.class).get();

        
        
        
        

        context.contentType("application/json; application/xml");
        
        this.deletePetLogic(petId);
        

        switch (this.code) {
            case 400:
                context.result("Invalid ID supplied");
                context.status(400);
                break;
            case 404:
                context.result("Pet not found");
                context.status(404);
                break;
            default: 
        }

        this.code = 200;
    }

    public abstract void deletePetLogic(Long petId); // TODO The method should set the responding status code by calling setCode()

    /**
    * Finds Pets by status
    *
    * Multiple status values can be provided with comma separated strings
    * 
    * QueryParams:
    * status: Status values that need to be considered for filter
    * 
    */
    public final void findPetsByStatus(Context context) {
        
        

        // Authentication
        
        final String flow = "implicit";
        final String authorizationURL = "https://petstore.swagger.io/oauth/authorize";
        final List<Map<String,String>> scopes = new ArrayList<>();
        Map<String, String> scope;
        scope = new HashMap<>();
        scope.put("write:pets", "modify pets in your account");
        scopes.add(scope);
        scope = new HashMap<>();
        scope.put("read:pets", "read your pets");
        scopes.add(scope);
        

        
        // Query params
        List<String> status = context.queryParams("status");
        List<StatusEnum> statusenumlist = new ArrayList<>();
        for (String value : status)
            statusenumlist.add(StatusEnum.fromValue(value));
        

        
        
        

        context.contentType("application/json; application/xml");
        
        CompletableFuture<List<Pet>> result = this.findPetsByStatusLogic(status);



        switch (this.code) {
            
            case 400:
                context.result("Invalid status value");
                context.status(400);
                break;
            default: context.result(result.thenApply(Utilities::serializeMany));
        }

        this.code = 200;
    }

    public abstract CompletableFuture<List<Pet>> findPetsByStatusLogic(List<String> status); // TODO The method should set the responding status code by calling setCode()

    /**
    * Finds Pets by tags
    *
    * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
    * 
    * QueryParams:
    * tags: Tags to filter by
    * 
    */
    @Deprecated
    public final void findPetsByTags(Context context) {
        
        

        // Authentication
        
        final String flow = "implicit";
        final String authorizationURL = "https://petstore.swagger.io/oauth/authorize";
        final List<Map<String,String>> scopes = new ArrayList<>();
        Map<String, String> scope;
        scope = new HashMap<>();
        scope.put("write:pets", "modify pets in your account");
        scopes.add(scope);
        scope = new HashMap<>();
        scope.put("read:pets", "read your pets");
        scopes.add(scope);
        

        
        // Query params
        List<String> tags = context.queryParams("tags");
        

        
        
        

        context.contentType("application/json; application/xml");
        
        CompletableFuture<List<Pet>> result = this.findPetsByTagsLogic(tags);



        switch (this.code) {
            
            case 400:
                context.result("Invalid tag value");
                context.status(400);
                break;
            default: context.result(result.thenApply(Utilities::serializeMany));
        }

        this.code = 200;
    }

    public abstract CompletableFuture<List<Pet>> findPetsByTagsLogic(List<String> tags); // TODO The method should set the responding status code by calling setCode()

    /**
    * Find pet by ID
    *
    * Returns a single pet
    * 
    * PathParams:
    * petId: ID of pet to return
    * 
    */
    public final void getPetById(Context context) {
        
        

        // Authentication
        if (!context.headerMap().containsKey("api_key"))
            throw new UnauthorizedResponse();
        

        // Path params
        Long petId = context.pathParam("petId", Long.class).get();

        
        
        
        

        context.contentType("application/json; application/xml");
        
        CompletableFuture<Pet> result = this.getPetByIdLogic(petId);



        switch (this.code) {
            
            case 400:
                context.result("Invalid ID supplied");
                context.status(400);
                break;
            case 404:
                context.result("Pet not found");
                context.status(404);
                break;
            default: context.result(result.thenApply(Utilities::serializeOne));
        }

        this.code = 200;
    }

    public abstract CompletableFuture<Pet> getPetByIdLogic(Long petId); // TODO The method should set the responding status code by calling setCode()

    /**
    * Update an existing pet
    *
    * 
    * 
    */
    public final void updatePet(Context context) {
        
        // Check request content type
        String contentType = context.contentType();
        if (contentType == null || !contentType.contains("application/json") || !contentType.contains("application/xml"))
            throw new BadRequestResponse();

        // Authentication
        
        final String flow = "implicit";
        final String authorizationURL = "https://petstore.swagger.io/oauth/authorize";
        final List<Map<String,String>> scopes = new ArrayList<>();
        Map<String, String> scope;
        scope = new HashMap<>();
        scope.put("write:pets", "modify pets in your account");
        scopes.add(scope);
        scope = new HashMap<>();
        scope.put("read:pets", "read your pets");
        scopes.add(scope);
        

        
        
        
        
        // Body
        Pet body = context.bodyValidator(Pet.class).get();
        

        context.contentType("application/json; application/xml");
        
        this.updatePetLogic(body);
        

        switch (this.code) {
            case 400:
                context.result("Invalid ID supplied");
                context.status(400);
                break;
            case 404:
                context.result("Pet not found");
                context.status(404);
                break;
            case 405:
                context.result("Validation exception");
                context.status(405);
                break;
            default: 
        }

        this.code = 200;
    }

    public abstract void updatePetLogic(Pet body); // TODO The method should set the responding status code by calling setCode()

    /**
    * Updates a pet in the store with form data
    *
    * 
    * 
    * PathParams:
    * petId: ID of pet that needs to be updated
    * 
    * 
    * FormParams:
    * name: Updated name of the pet
    * status: Updated status of the pet
    * 
    */
    public final void updatePetWithForm(Context context) {
        
        // Check request content type
        String contentType = context.contentType();
        if (contentType == null || !contentType.contains("application/x-www-form-urlencoded"))
            throw new BadRequestResponse();

        // Authentication
        
        final String flow = "implicit";
        final String authorizationURL = "https://petstore.swagger.io/oauth/authorize";
        final List<Map<String,String>> scopes = new ArrayList<>();
        Map<String, String> scope;
        scope = new HashMap<>();
        scope.put("write:pets", "modify pets in your account");
        scopes.add(scope);
        scope = new HashMap<>();
        scope.put("read:pets", "read your pets");
        scopes.add(scope);
        

        // Path params
        Long petId = context.pathParam("petId", Long.class).get();

        
        // Form params
        String name = context.formParam("name", String.class).getOrNull();
        
        String status = context.formParam("status", String.class).getOrNull();
        
        
        

        context.contentType("application/json; application/xml");
        
        this.updatePetWithFormLogic(petId, name, status);
        

        switch (this.code) {
            case 405:
                context.result("Invalid input");
                context.status(405);
                break;
            default: 
        }

        this.code = 200;
    }

    public abstract void updatePetWithFormLogic(Long petId, String name, String status); // TODO The method should set the responding status code by calling setCode()

    /**
    * uploads an image
    *
    * 
    * 
    * PathParams:
    * petId: ID of pet to update
    * 
    * 
    * FormParams:
    * additionalMetadata: Additional data to pass to server
    * file: file to upload
    * 
    */
    public final void uploadFile(Context context) {
        final String filePath = ""; // TODO set uploadFilePath
        // Check request content type
        String contentType = context.contentType();
        if (contentType == null || !contentType.contains("multipart/form-data"))
            throw new BadRequestResponse();

        // Authentication
        
        final String flow = "implicit";
        final String authorizationURL = "https://petstore.swagger.io/oauth/authorize";
        final List<Map<String,String>> scopes = new ArrayList<>();
        Map<String, String> scope;
        scope = new HashMap<>();
        scope.put("write:pets", "modify pets in your account");
        scopes.add(scope);
        scope = new HashMap<>();
        scope.put("read:pets", "read your pets");
        scopes.add(scope);
        

        // Path params
        Long petId = context.pathParam("petId", Long.class).get();

        
        // Form params
        String additionalMetadata = context.formParam("additionalMetadata", String.class).getOrNull();
        UploadedFile file = context.uploadedFile("file");
        if (file != null)
            FileUtil.streamToFile(file.getContent(), filePath + file.getFilename());

        
        

        context.contentType("application/json");
        
        CompletableFuture<ApiResponse> result = this.uploadFileLogic(petId, additionalMetadata, file);



        switch (this.code) {
            
            default: context.result(result.thenApply(Utilities::serializeOne));
        }

        this.code = 200;
    }

    public abstract CompletableFuture<ApiResponse> uploadFileLogic(Long petId, String additionalMetadata, UploadedFile file); // TODO The method should set the responding status code by calling setCode()
    
    /**
    * Add a new pet to the store
    *
    * 
    * 
    */
    public final void addPet(WsMessageContext context) {

        String message = context.message();
        String request = message.split(">:")[0];
        String requestMessage = message.split(">:", 2)[1];
        
        
        
        //Response
        context.send(this.addPetWsLogic(requestMessage));
    }

    public abstract String addPetWsLogic(String requestMessage);

    /**
    * Deletes a pet
    *
    * 
    * 
    * PathParams:
    * petId: Pet id to delete
    * 
    */
    public final void deletePet(WsMessageContext context) {

        String message = context.message();
        String request = message.split(">:")[0];
        String requestMessage = message.split(">:", 2)[1];
        // Path params
        Long petId = context.pathParam("petId", Long.class).get();

        
        
        //Response
        context.send(this.deletePetWsLogic(requestMessage, petId));
    }

    public abstract String deletePetWsLogic(String requestMessage, Long petId);

    /**
    * Finds Pets by status
    *
    * Multiple status values can be provided with comma separated strings
    * 
    * QueryParams:
    * status: Status values that need to be considered for filter
    * 
    */
    public final void findPetsByStatus(WsMessageContext context) {

        String message = context.message();
        String request = message.split(">:")[0];
        String requestMessage = message.split(">:", 2)[1];
        
        // Query params
        List<String> status = context.queryParams("status");
        List<StatusEnum> statusenumlist = new ArrayList<>();
        for (String value : status)
        statusenumlist.add(StatusEnum.fromValue(value));
        

        
        //Response
        context.send(this.findPetsByStatusWsLogic(requestMessage, status));
    }

    public abstract String findPetsByStatusWsLogic(String requestMessage, List<String> status);

    /**
    * Finds Pets by tags
    *
    * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
    * 
    * QueryParams:
    * tags: Tags to filter by
    * 
    */
    @Deprecated
    public final void findPetsByTags(WsMessageContext context) {

        String message = context.message();
        String request = message.split(">:")[0];
        String requestMessage = message.split(">:", 2)[1];
        
        // Query params
        List<String> tags = context.queryParams("tags");
        

        
        //Response
        context.send(this.findPetsByTagsWsLogic(requestMessage, tags));
    }

    public abstract String findPetsByTagsWsLogic(String requestMessage, List<String> tags);

    /**
    * Find pet by ID
    *
    * Returns a single pet
    * 
    * PathParams:
    * petId: ID of pet to return
    * 
    */
    public final void getPetById(WsMessageContext context) {

        String message = context.message();
        String request = message.split(">:")[0];
        String requestMessage = message.split(">:", 2)[1];
        // Path params
        Long petId = context.pathParam("petId", Long.class).get();

        
        
        //Response
        context.send(this.getPetByIdWsLogic(requestMessage, petId));
    }

    public abstract String getPetByIdWsLogic(String requestMessage, Long petId);

    /**
    * Update an existing pet
    *
    * 
    * 
    */
    public final void updatePet(WsMessageContext context) {

        String message = context.message();
        String request = message.split(">:")[0];
        String requestMessage = message.split(">:", 2)[1];
        
        
        
        //Response
        context.send(this.updatePetWsLogic(requestMessage));
    }

    public abstract String updatePetWsLogic(String requestMessage);

    /**
    * Updates a pet in the store with form data
    *
    * 
    * 
    * PathParams:
    * petId: ID of pet that needs to be updated
    * 
    */
    public final void updatePetWithForm(WsMessageContext context) {

        String message = context.message();
        String request = message.split(">:")[0];
        String requestMessage = message.split(">:", 2)[1];
        // Path params
        Long petId = context.pathParam("petId", Long.class).get();

        
        
        //Response
        context.send(this.updatePetWithFormWsLogic(requestMessage, petId));
    }

    public abstract String updatePetWithFormWsLogic(String requestMessage, Long petId);

    /**
    * uploads an image
    *
    * 
    * 
    * PathParams:
    * petId: ID of pet to update
    * 
    */
    public final void uploadFile(WsMessageContext context) {

        String message = context.message();
        String request = message.split(">:")[0];
        String requestMessage = message.split(">:", 2)[1];
        // Path params
        Long petId = context.pathParam("petId", Long.class).get();

        
        
        //Response
        context.send(this.uploadFileWsLogic(requestMessage, petId));
    }

    public abstract String uploadFileWsLogic(String requestMessage, Long petId);
}
