/*
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: apiteam@swagger.io
 *
 * License: Apache 2.0 http://www.apache.org/licenses/LICENSE-2.0.html
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 */

package api;

import java.util.ArrayList;
import io.javalin.http.BadRequestResponse;
import java.util.concurrent.CompletableFuture;
import io.javalin.http.Context;
import java.util.HashMap;
import io.javalin.Javalin;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import model.Order;
import io.javalin.websocket.WsMessageContext;

import utils.Utilities;
import io.javalin.http.UnauthorizedResponse;

public class StoreAPI {

    private final String basePath;

    public StoreAPI(final String basePath) {
        this.basePath = Objects.requireNonNull(basePath);
    }

    public void registerRoutes(Javalin server) {
        server.delete(this.basePath + "/store/order/{orderId}".replace("{",":").replace("}",""), this::deleteOrder);
        server.get(this.basePath + "/store/inventory".replace("{",":").replace("}",""), this::getInventory);
        server.get(this.basePath + "/store/order/{orderId}".replace("{",":").replace("}",""), this::getOrderById);
        server.post(this.basePath + "/store/order".replace("{",":").replace("}",""), this::placeOrder);
        server.ws(this.basePath + "/Store", ws -> {
            ws.onConnect(ctx -> System.out.println("Connected"));
            ws.onMessage(msgContext -> {
                String request = msgContext.message().split(">:")[0];
                switch (request){ 
                    case "DELETE/store/order/{orderId}": deleteOrder(msgContext);
                        break;    
                    case "GET/store/inventory": getInventory(msgContext);
                        break;    
                    case "GET/store/order/{orderId}": getOrderById(msgContext);
                        break;    
                    case "POST/store/order": placeOrder(msgContext);
                        break;
                }
            });
            ws.onBinaryMessage(msgContext -> {
               byte[] data = msgContext.data();
               //TODO manage binary data
            });
            ws.onClose(ctx -> System.out.println("Connection Closed"));
            ws.onError(ctx -> System.out.println("Error occurred"));
        });
    }
    
    /**
    * Delete purchase order by ID
    *
    * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
    * 
    * PathParams:
    * orderId: ID of the order that needs to be deleted
    * 
    */
    public void deleteOrder(Context context) {
        int code = 200;
        
        

        
        // Path params
        Long orderId = context.pathParam("orderId", Long.class).check(i -> i >= 1).get();

        
        
        
        

        //TODO Implement Behaviour

        context.contentType("application/json; application/xml");


        switch (code) {
            case 400:
                context.result("Invalid ID supplied");
                context.status(400);
                break;
            case 404:
                context.result("Order not found");
                context.status(404);
                break;
            default: 
        }
    }

    /**
    * Returns pet inventories by status
    *
    * Returns a map of status codes to quantities
    * 
    */
    public void getInventory(Context context) {
        int code = 200;
        
        

        // Authentication
        if (!context.headerMap().containsKey("api_key"))
            throw new UnauthorizedResponse();
        

        
        
        
        
        

        //TODO Implement Behaviour

        context.contentType("application/json");
        CompletableFuture<Map<String, Integer>> result = new CompletableFuture<>();
        

        switch (code) {
            
            default: context.result(result.thenApply(Utilities::serializeMap));
        }
    }

    /**
    * Find purchase order by ID
    *
    * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
    * 
    * PathParams:
    * orderId: ID of pet that needs to be fetched
    * 
    */
    public void getOrderById(Context context) {
        int code = 200;
        
        

        
        // Path params
        Long orderId = context.pathParam("orderId", Long.class).check(i -> i >= 1).check(i -> i <= 10).get();

        
        
        
        

        //TODO Implement Behaviour

        context.contentType("application/json; application/xml");
        CompletableFuture<Order> result = new CompletableFuture<>();
        

        switch (code) {
            
            case 400:
                context.result("Invalid ID supplied");
                context.status(400);
                break;
            case 404:
                context.result("Order not found");
                context.status(404);
                break;
            default: context.result(result.thenApply(Utilities::serializeOne));
        }
    }

    /**
    * Place an order for a pet
    *
    * 
    * 
    */
    public void placeOrder(Context context) {
        int code = 200;
        
        // Check request content type
        String contentType = context.contentType();
        if (contentType == null || !contentType.contains("application/json"))
            throw new BadRequestResponse();

        
        
        
        
        
        // Body
        Order body = context.bodyValidator(Order.class).get();
        

        //TODO Implement Behaviour

        context.contentType("application/json; application/xml");
        CompletableFuture<Order> result = new CompletableFuture<>();
        

        switch (code) {
            
            case 400:
                context.result("Invalid Order");
                context.status(400);
                break;
            default: context.result(result.thenApply(Utilities::serializeOne));
        }
    }
    
    /**
    * Delete purchase order by ID
    *
    * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
    * 
    * PathParams:
    * orderId: ID of the order that needs to be deleted
    * 
    */
    public void deleteOrder(WsMessageContext context) {

        String message = context.message();
        String request = message.split(">:")[0];
        String requestMessage = "";
        String[] parts = message.split(">:");
        for (String el : parts)
            requestMessage = requestMessage.concat(el);
        String response = "";
        // Path params
        Long orderId = context.pathParam("orderId", Long.class).check(i -> i >= 1).get();

        
        
        //TODO Implement Behaviour


        //Response
        context.send(response);
    }

    /**
    * Returns pet inventories by status
    *
    * Returns a map of status codes to quantities
    * 
    */
    public void getInventory(WsMessageContext context) {

        String message = context.message();
        String request = message.split(">:")[0];
        String requestMessage = "";
        String[] parts = message.split(">:");
        for (String el : parts)
            requestMessage = requestMessage.concat(el);
        String response = "";
        
        
        
        //TODO Implement Behaviour


        //Response
        context.send(response);
    }

    /**
    * Find purchase order by ID
    *
    * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
    * 
    * PathParams:
    * orderId: ID of pet that needs to be fetched
    * 
    */
    public void getOrderById(WsMessageContext context) {

        String message = context.message();
        String request = message.split(">:")[0];
        String requestMessage = "";
        String[] parts = message.split(">:");
        for (String el : parts)
            requestMessage = requestMessage.concat(el);
        String response = "";
        // Path params
        Long orderId = context.pathParam("orderId", Long.class).check(i -> i >= 1).check(i -> i <= 10).get();

        
        
        //TODO Implement Behaviour


        //Response
        context.send(response);
    }

    /**
    * Place an order for a pet
    *
    * 
    * 
    */
    public void placeOrder(WsMessageContext context) {

        String message = context.message();
        String request = message.split(">:")[0];
        String requestMessage = "";
        String[] parts = message.split(">:");
        for (String el : parts)
            requestMessage = requestMessage.concat(el);
        String response = "";
        
        
        
        //TODO Implement Behaviour


        //Response
        context.send(response);
    }
}
