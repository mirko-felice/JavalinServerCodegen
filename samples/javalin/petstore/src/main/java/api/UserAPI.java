/*
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: apiteam@swagger.io
 *
 * License: Apache 2.0 http://www.apache.org/licenses/LICENSE-2.0.html
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 */

package api;

import java.util.ArrayList;
import io.javalin.http.BadRequestResponse;
import java.util.concurrent.CompletableFuture;
import io.javalin.http.Context;
import java.util.HashMap;
import org.json.JSONArray;
import io.javalin.Javalin;
import io.javalin.plugin.json.JavalinJson;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import model.User;
import io.javalin.websocket.WsMessageContext;

import utils.Utilities;
import io.javalin.http.UnauthorizedResponse;

public class UserAPI {

    private final String basePath;

    public UserAPI(final String basePath) {
        this.basePath = Objects.requireNonNull(basePath);
    }

    public void registerRoutes(Javalin server) {
        server.post(this.basePath + "/user".replace("{",":").replace("}",""), this::createUser);
        server.post(this.basePath + "/user/createWithArray".replace("{",":").replace("}",""), this::createUsersWithArrayInput);
        server.post(this.basePath + "/user/createWithList".replace("{",":").replace("}",""), this::createUsersWithListInput);
        server.delete(this.basePath + "/user/{username}".replace("{",":").replace("}",""), this::deleteUser);
        server.get(this.basePath + "/user/{username}".replace("{",":").replace("}",""), this::getUserByName);
        server.get(this.basePath + "/user/login".replace("{",":").replace("}",""), this::loginUser);
        server.get(this.basePath + "/user/logout".replace("{",":").replace("}",""), this::logoutUser);
        server.put(this.basePath + "/user/{username}".replace("{",":").replace("}",""), this::updateUser);
        server.ws(this.basePath + "/User", ws -> {
            ws.onConnect(ctx -> System.out.println("Connected"));
            ws.onMessage(msgContext -> {
                String request = msgContext.message().split(">:")[0];
                switch (request){ 
                    case "POST/user": createUser(msgContext);
                        break;    
                    case "POST/user/createWithArray": createUsersWithArrayInput(msgContext);
                        break;    
                    case "POST/user/createWithList": createUsersWithListInput(msgContext);
                        break;    
                    case "DELETE/user/{username}": deleteUser(msgContext);
                        break;    
                    case "GET/user/{username}": getUserByName(msgContext);
                        break;    
                    case "GET/user/login": loginUser(msgContext);
                        break;    
                    case "GET/user/logout": logoutUser(msgContext);
                        break;    
                    case "PUT/user/{username}": updateUser(msgContext);
                        break;
                }
            });
            ws.onBinaryMessage(msgContext -> {
               byte[] data = msgContext.data();
               //TODO manage binary data
            });
            ws.onClose(ctx -> System.out.println("Connection Closed"));
            ws.onError(ctx -> System.out.println("Error occurred"));
        });
    }
    
    /**
    * Create user
    *
    * This can only be done by the logged in user.
    * 
    */
    public void createUser(Context context) {
        int code = 200;
        
        // Check request content type
        String contentType = context.contentType();
        if (contentType == null || !contentType.contains("application/json"))
            throw new BadRequestResponse();

        
        
        
        
        
        // Body
        User body = context.bodyValidator(User.class).get();
        

        //TODO Implement Behaviour

        context.contentType("application/json; application/xml");


        switch (code) {
            
            default: context.result("successful operation");
        }
    }

    /**
    * Creates list of users with given input array
    *
    * 
    * 
    */
    public void createUsersWithArrayInput(Context context) {
        int code = 200;
        
        // Check request content type
        String contentType = context.contentType();
        if (contentType == null || !contentType.contains("application/json"))
            throw new BadRequestResponse();

        
        
        
        
        
        // Body
        JSONArray jsonArray = new JSONArray(context.body());
        for (int i = 0; i < jsonArray.length(); i++) {
            User element =  JavalinJson.fromJson(jsonArray.getJSONObject(i).toString(), User.class);
        }

        //TODO Implement Behaviour

        context.contentType("application/json; application/xml");


        switch (code) {
            
            default: context.result("successful operation");
        }
    }

    /**
    * Creates list of users with given input array
    *
    * 
    * 
    */
    public void createUsersWithListInput(Context context) {
        int code = 200;
        
        // Check request content type
        String contentType = context.contentType();
        if (contentType == null || !contentType.contains("application/json"))
            throw new BadRequestResponse();

        
        
        
        
        
        // Body
        JSONArray jsonArray = new JSONArray(context.body());
        for (int i = 0; i < jsonArray.length(); i++) {
            User element =  JavalinJson.fromJson(jsonArray.getJSONObject(i).toString(), User.class);
        }

        //TODO Implement Behaviour

        context.contentType("application/json; application/xml");


        switch (code) {
            
            default: context.result("successful operation");
        }
    }

    /**
    * Delete user
    *
    * This can only be done by the logged in user.
    * 
    * PathParams:
    * username: The name that needs to be deleted
    * 
    */
    public void deleteUser(Context context) {
        int code = 200;
        
        

        
        // Path params
        String username = context.pathParam("username", String.class).get();

        
        
        
        

        //TODO Implement Behaviour

        context.contentType("application/json; application/xml");


        switch (code) {
            case 400:
                context.result("Invalid username supplied");
                context.status(400);
                break;
            case 404:
                context.result("User not found");
                context.status(404);
                break;
            default: 
        }
    }

    /**
    * Get user by user name
    *
    * 
    * 
    * PathParams:
    * username: The name that needs to be fetched. Use user1 for testing. 
    * 
    */
    public void getUserByName(Context context) {
        int code = 200;
        
        

        
        // Path params
        String username = context.pathParam("username", String.class).get();

        
        
        
        

        //TODO Implement Behaviour

        context.contentType("application/json; application/xml");
        CompletableFuture<User> result = new CompletableFuture<>();
        

        switch (code) {
            
            case 400:
                context.result("Invalid username supplied");
                context.status(400);
                break;
            case 404:
                context.result("User not found");
                context.status(404);
                break;
            default: context.result(result.thenApply(Utilities::serializeOne));
        }
    }

    /**
    * Logs user into the system
    *
    * 
    * 
    * 
    * QueryParams:
    * username: The user name for login
    * password: The password for login in clear text
    * 
    */
    public void loginUser(Context context) {
        int code = 200;
        
        

        
        
        // Query params
        String username = context.queryParam("username", String.class).get();
        

        String password = context.queryParam("password", String.class).get();
        

        
        
        

        //TODO Implement Behaviour

        context.contentType("application/json; application/xml");
        CompletableFuture<String> result = new CompletableFuture<>();
        

        switch (code) {
            
            case 400:
                context.result("Invalid username/password supplied");
                context.status(400);
                break;
            default: context.result(result.thenApply(Utilities::serializeOne));
        }
    }

    /**
    * Logs out current logged in user session
    *
    * 
    * 
    */
    public void logoutUser(Context context) {
        int code = 200;
        
        

        
        
        
        
        
        

        //TODO Implement Behaviour

        context.contentType("application/json; application/xml");


        switch (code) {
            
            default: context.result("successful operation");
        }
    }

    /**
    * Updated user
    *
    * This can only be done by the logged in user.
    * 
    * PathParams:
    * username: name that need to be updated
    * 
    */
    public void updateUser(Context context) {
        int code = 200;
        
        // Check request content type
        String contentType = context.contentType();
        if (contentType == null || !contentType.contains("application/json"))
            throw new BadRequestResponse();

        
        // Path params
        String username = context.pathParam("username", String.class).get();

        
        
        
        // Body
        User body = context.bodyValidator(User.class).get();
        

        //TODO Implement Behaviour

        context.contentType("application/json; application/xml");


        switch (code) {
            case 400:
                context.result("Invalid user supplied");
                context.status(400);
                break;
            case 404:
                context.result("User not found");
                context.status(404);
                break;
            default: 
        }
    }
    
    /**
    * Create user
    *
    * This can only be done by the logged in user.
    * 
    */
    public void createUser(WsMessageContext context) {

        String message = context.message();
        String request = message.split(">:")[0];
        String requestMessage = "";
        String[] parts = message.split(">:");
        for (String el : parts)
            requestMessage = requestMessage.concat(el);
        String response = "";
        
        
        
        //TODO Implement Behaviour


        //Response
        context.send(response);
    }

    /**
    * Creates list of users with given input array
    *
    * 
    * 
    */
    public void createUsersWithArrayInput(WsMessageContext context) {

        String message = context.message();
        String request = message.split(">:")[0];
        String requestMessage = "";
        String[] parts = message.split(">:");
        for (String el : parts)
            requestMessage = requestMessage.concat(el);
        String response = "";
        
        
        
        //TODO Implement Behaviour


        //Response
        context.send(response);
    }

    /**
    * Creates list of users with given input array
    *
    * 
    * 
    */
    public void createUsersWithListInput(WsMessageContext context) {

        String message = context.message();
        String request = message.split(">:")[0];
        String requestMessage = "";
        String[] parts = message.split(">:");
        for (String el : parts)
            requestMessage = requestMessage.concat(el);
        String response = "";
        
        
        
        //TODO Implement Behaviour


        //Response
        context.send(response);
    }

    /**
    * Delete user
    *
    * This can only be done by the logged in user.
    * 
    * PathParams:
    * username: The name that needs to be deleted
    * 
    */
    public void deleteUser(WsMessageContext context) {

        String message = context.message();
        String request = message.split(">:")[0];
        String requestMessage = "";
        String[] parts = message.split(">:");
        for (String el : parts)
            requestMessage = requestMessage.concat(el);
        String response = "";
        // Path params
        String username = context.pathParam("username", String.class).get();

        
        
        //TODO Implement Behaviour


        //Response
        context.send(response);
    }

    /**
    * Get user by user name
    *
    * 
    * 
    * PathParams:
    * username: The name that needs to be fetched. Use user1 for testing. 
    * 
    */
    public void getUserByName(WsMessageContext context) {

        String message = context.message();
        String request = message.split(">:")[0];
        String requestMessage = "";
        String[] parts = message.split(">:");
        for (String el : parts)
            requestMessage = requestMessage.concat(el);
        String response = "";
        // Path params
        String username = context.pathParam("username", String.class).get();

        
        
        //TODO Implement Behaviour


        //Response
        context.send(response);
    }

    /**
    * Logs user into the system
    *
    * 
    * 
    * QueryParams:
    * username: The user name for login
    * 
    * password: The password for login in clear text
    * 
    */
    public void loginUser(WsMessageContext context) {

        String message = context.message();
        String request = message.split(">:")[0];
        String requestMessage = "";
        String[] parts = message.split(">:");
        for (String el : parts)
            requestMessage = requestMessage.concat(el);
        String response = "";
        
        // Query params
        String username = context.queryParam("username", String.class, null).get();
        

        String password = context.queryParam("password", String.class, null).get();
        

        
        //TODO Implement Behaviour


        //Response
        context.send(response);
    }

    /**
    * Logs out current logged in user session
    *
    * 
    * 
    */
    public void logoutUser(WsMessageContext context) {

        String message = context.message();
        String request = message.split(">:")[0];
        String requestMessage = "";
        String[] parts = message.split(">:");
        for (String el : parts)
            requestMessage = requestMessage.concat(el);
        String response = "";
        
        
        
        //TODO Implement Behaviour


        //Response
        context.send(response);
    }

    /**
    * Updated user
    *
    * This can only be done by the logged in user.
    * 
    * PathParams:
    * username: name that need to be updated
    * 
    */
    public void updateUser(WsMessageContext context) {

        String message = context.message();
        String request = message.split(">:")[0];
        String requestMessage = "";
        String[] parts = message.split(">:");
        for (String el : parts)
            requestMessage = requestMessage.concat(el);
        String response = "";
        // Path params
        String username = context.pathParam("username", String.class).get();

        
        
        //TODO Implement Behaviour


        //Response
        context.send(response);
    }
}
