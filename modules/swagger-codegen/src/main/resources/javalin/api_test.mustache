package {{package}};

import utils.*;
{{#imports}}import {{import}};
{{/imports}}
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.AfterClass;
import java.net.URI;
import java.net.http.*;
import java.net.http.HttpResponse.BodyHandlers;
import java.net.http.HttpRequest.BodyPublishers;
import java.util.regex.Pattern;
import java.util.concurrent.CompletionStage;
import java.nio.ByteBuffer;

/**
* API tests for {{classname}}API
*/
public class {{classname}}APITest {

    private static final String BASE_PATH = "{{basePathWithoutHost}}";
    private static final String BASE_URI = "http://localhost:7000" + BASE_PATH;
    private static final {{classname}}API API = new {{classname}}API(BASE_PATH) {
{{#operations}}{{#operation}}{{#hasHttpScheme}}
        @Override
        public {{#responses}}{{#-first}}{{#isDefault}}{{#dataType}}CompletableFuture<{{dataType}}{{#isListContainer}}<{{baseType}}>{{/isListContainer}}{{#isMapContainer}}<String, {{baseType}}>{{/isMapContainer}}>{{/dataType}}{{^dataType}}void{{/dataType}}{{/isDefault}}{{^isDefault}}void{{/isDefault}}{{/-first}}{{/responses}} {{operationId}}Logic({{#allParams}}{{#isFile}}UploadedFile{{/isFile}}{{^isFile}}{{dataType}}{{#isListContainer}}<{{baseType}}>{{/isListContainer}}{{/isFile}} {{baseName}}{{^-last}}, {{/-last}}{{/allParams}}) { {{#responses}}{{#-first}}{{#isDefault}}{{#dataType}}
            return new CompletableFuture<>();{{/dataType}}{{/isDefault}}{{/-first}}{{/responses}}
        }
    {{/hasHttpScheme}}

    {{#hasWSScheme}}
        @Override
        public String {{operationId}}WsLogic(String requestMessage{{#allParams}}{{^isBodyParam}}{{^isFormParam}}, {{dataType}}{{#isListContainer}}<{{baseType}}>{{/isListContainer}} {{baseName}}{{/isFormParam}}{{/isBodyParam}}{{/allParams}}) {
            return "";
        }
    {{/hasWSScheme}}{{/operation}}{{/operations}}
    };
    private static final Javalin SERVER = Javalin.create().start();
    private final HttpClient client = HttpClient.newHttpClient();
    private String uri;

    @BeforeClass
    public static void setUp() {
        API.registerRoutes(SERVER);
    }

    @AfterClass
    public static void tearDown() {
        SERVER.stop();
    }
{{#operations}}{{#operation}}
    /**
    * {{summary}}
    *
    * {{{notes}}}
    */
    @Test
    public void {{operationId}}Test() {
        {{#allParams}}
        {{dataType}}{{#isListContainer}}<{{baseType}}>{{/isListContainer}} {{paramName}} = null;
        {{/allParams}}

        uri = BASE_URI + "{{path}}"{{#pathParams}}.replaceFirst(Pattern.quote("{" + "{{paramName}}" + "}"), String.valueOf({{paramName}})){{/pathParams}}{{#queryParams}}.concat("{{#-first}}?{{/-first}}{{^-first}}&{{/-first}}" + "{{paramName}}" + "=" + String.valueOf({{paramName}})){{/queryParams}};
        HttpRequest.Builder builder = createRequest(){{#hasConsumes}}.header("Content-Type", "{{#consumes}}{{mediaType}}{{#hasMore}};{{/hasMore}}{{/consumes}}"){{/hasConsumes}};
        {{#headerParams}}builder.header("{{paramName}}", String.valueOf({{paramName}}));{{/headerParams}}
        {{#authMethods}}{{#isKeyInHeader}}builder.header("{{name}}", "");{{/isKeyInHeader}}{{/authMethods}}
        HttpRequest request = {{#lowercase}}{{httpMethod}}{{/lowercase}}(builder /* TODO initialize params and uncomment ,{{#formParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/formParams}}{{#bodyParams}}{{paramName}}{{/bodyParams}}*/);

        CompletableFuture<{{#returnType}}{{returnType}}{{#isListContainer}}<{{returnBaseType}}>{{/isListContainer}}{{#isMapContainer}}<String, {{returnBaseType}}>{{/isMapContainer}}{{/returnType}}{{^returnType}}HttpResponse<String>{{/returnType}}> response = sendAsync(request){{#returnType}}.thenApply(Utilities::responseChecker).thenCompose(Utilities.deserialize{{#isMapContainer}}Map(String.class, {{returnBaseType}}.class)){{/isMapContainer}}{{^isMapContainer}}{{#isListContainer}}Many{{/isListContainer}}{{^isListContainer}}One{{/isListContainer}}({{returnBaseType}}.class)){{/isMapContainer}}{{/returnType}};
        // TODO: test validations

        {{#hasWSScheme}}
        uri = BASE_URI + "/{{baseName}}";

        WebSocket.Listener listener = new WebSocket.Listener() {
            @Override
            public void onOpen(WebSocket webSocket) {}

            @Override
            public CompletionStage<?> onText(WebSocket webSocket, CharSequence data, boolean last) {
                return null;
            }

            @Override
            public CompletionStage<?> onBinary(WebSocket webSocket, ByteBuffer data, boolean last) {
                return null;
            }

            @Override
            public CompletionStage<?> onClose(WebSocket webSocket, int statusCode, String reason) {
                return null;
            }

            @Override
            public void onError(WebSocket webSocket, Throwable error) { }
            };

        CompletableFuture<WebSocket> webSocket = client.newWebSocketBuilder().buildAsync(URI.create(uri), listener);
        {{/hasWSScheme}}

    }
{{/operation}}{{/operations}}

    private CompletableFuture<HttpResponse<String>> sendAsync(HttpRequest request) {
        return client.sendAsync(request, BodyHandlers.ofString());
    }

    private HttpRequest.Builder createRequest(){
        return HttpRequest.newBuilder().uri(URI.create(this.uri));
    }

    private HttpRequest get(HttpRequest.Builder builder){
        return builder.GET().build();
    }

    private HttpRequest post(HttpRequest.Builder builder, Object object){
        return builder.POST(BodyPublishers.ofString(object instanceof List ? Utilities.serializeMany((List<?>) object) : object instanceof Map ? Utilities.serializeMap((Map<?,?>)object) : Utilities.serializeOne(object))).build();
    }

    private HttpRequest post(HttpRequest.Builder builder, Object... objects){
        var request = builder.header("Content-Type", "multipart/form-data");
        for (Object o: objects)
            request.POST(BodyPublishers.ofString(Utilities.serializeOne(o)));
        return request.build();
    }

    private HttpRequest put(HttpRequest.Builder builder, Object object){
        return builder.PUT(BodyPublishers.ofString(object instanceof List ? Utilities.serializeMany((List<?>) object) : object instanceof Map ? Utilities.serializeMap((Map<?,?>)object) : Utilities.serializeOne(object))).build();
    }

    private HttpRequest put(HttpRequest.Builder builder, Object... objects){
        var request = builder.header("Content-Type", "multipart/form-data");
        for (Object o: objects)
            request.PUT(BodyPublishers.ofString(Utilities.serializeOne(o)));
        return request.build();
    }

    private HttpRequest delete(HttpRequest.Builder builder){
        return builder.DELETE().build();
    }
}