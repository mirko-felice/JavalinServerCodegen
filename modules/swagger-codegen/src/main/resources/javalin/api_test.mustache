package {{package}};

import utils.*;
{{#imports}}import {{import}};
{{/imports}}
import org.junit.Before;
import org.junit.Test;
import org.junit.After;
import java.net.URI;
import java.net.http.*;
import java.net.http.HttpResponse.BodyHandlers;
import java.net.http.HttpRequest.BodyPublishers;
import java.util.function.Function;
import java.util.*;

import static org.mockito.Mockito.*;

/**
* API tests for {{classname}}API
*/
public class {{classname}}APITest {

    private static final String BASE_PATH = "{{basePathWithoutHost}}";
    private static final String BASE_URI = "http://localhost:7000" + BASE_PATH;
    private final HttpClient client = HttpClient.newHttpClient();
    private final {{classname}}API api = new {{classname}}API(BASE_PATH);
    private String uri;
    private Javalin server;

    @Before
    public void setUp() {
        server = Javalin.create().start();
        api.registerRoutes(server);
    }

    @After
    public void tearDown() {
        server.stop();
    }
{{#operations}}{{#operation}}
    /**
    * {{summary}}
    *
    * {{{notes}}}
    *
    */
    @Test
    public void {{operationId}}Test() {
    {{#allParams}}
    {{dataType}}{{#isListContainer}}<{{baseType}}>{{/isListContainer}} {{paramName}} = null;
    {{/allParams}}

    uri = BASE_URI;
    uri += replace("{{path}}");

    HttpRequest request = {{#lowercase}}{{httpMethod}}{{/lowercase}}();
    {{#returnType}}CompletableFuture<{{returnType}}{{#isListContainer}}<{{returnBaseType}}>{{/isListContainer}}{{#isMapContainer}}<String, {{returnBaseType}}>{{/isMapContainer}}> response = {{/returnType}}sendAsync(request){{#returnType}}.thenApply(this::responseChecker).thenCompose(Utilities.deserialize{{#isMapContainer}}Map({{returnBaseType}}.class)){{/isMapContainer}}{{^isMapContainer}}{{#isListContainer}}Many{{/isListContainer}}{{^isListContainer}}One{{/isListContainer}}({{returnBaseType}}.class)){{/isMapContainer}}{{/returnType}};

    // TODO: test validations

    }
{{/operation}}{{/operations}}

    private CompletableFuture<HttpResponse<String>> sendAsync(HttpRequest request) {
        return client.sendAsync(request, BodyHandlers.ofString());
    }

    private String responseChecker(HttpResponse<String> response) {
        if (response.statusCode() == 200)
            return response.body();
        else
            throw new RemoteException(String.format("Unexpected response while %s %s: %d", response.request().method(), response.uri(), response.statusCode()));
    }

    private HttpRequest get(){
        return HttpRequest.newBuilder()
                .uri(URI.create(uri))
                .GET()
                .build();
    }

    private HttpRequest post(){
        return HttpRequest.newBuilder()
                .uri(URI.create(uri))
                .POST(BodyPublishers.ofString("test"))
                .build();
    }

    private HttpRequest put(){
        return HttpRequest.newBuilder()
                .uri(URI.create(uri))
                .PUT(BodyPublishers.ofString("test"))
                .build();
    }

    private HttpRequest delete(){
        return HttpRequest.newBuilder()
                .uri(URI.create(uri))
                .DELETE()
                .build();
    }

    private String replace(String toReplaced) {
        if (toReplaced.contains("{"))
            return toReplaced.replace("{", "?").replace("}", "") + "=test";
        else
            return toReplaced;
    }
}