package {{package}};

import utils.*;
{{#imports}}import {{import}};
{{/imports}}
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.AfterClass;
import java.net.URI;
import java.net.http.*;
import java.net.http.HttpResponse.BodyHandlers;
import java.net.http.HttpRequest.BodyPublishers;
import java.util.regex.Pattern;

/**
* API tests for {{classname}}API
*/
public class {{classname}}APITest {

    private static final String BASE_PATH = "{{basePathWithoutHost}}";
    private static final String BASE_URI = "http://localhost:7000" + BASE_PATH;
    private static final {{classname}}API API = new {{classname}}API(BASE_PATH);
    private static final Javalin SERVER = Javalin.create().start();
    private final HttpClient client = HttpClient.newHttpClient();
    private String uri;

    @BeforeClass
    public static void setUp() {
        API.registerRoutes(SERVER);
    }

    @AfterClass
    public static void tearDown() {
        SERVER.stop();
    }
{{#operations}}{{#operation}}
    /**
    * {{summary}}
    *
    * {{{notes}}}
    */
    @Test
    public void {{operationId}}Test() {
        {{#allParams}}
        {{dataType}}{{#isListContainer}}<{{baseType}}>{{/isListContainer}} {{paramName}} = null;
        {{/allParams}}

        uri = BASE_URI + "{{path}}"{{#pathParams}}.replaceFirst(Pattern.quote("{" + "{{paramName}}" + "}"), String.valueOf({{paramName}})){{/pathParams}}{{#queryParams}}.concat("{{#-first}}?{{/-first}}{{^-first}}&{{/-first}}" + "{{paramName}}" + "=" + String.valueOf({{paramName}})){{/queryParams}};
        HttpRequest.Builder builder = createRequest();
        {{#headerParams}}builder.header("{{paramName}}", String.valueOf({{paramName}}));{{/headerParams}}
        HttpRequest request = {{#lowercase}}{{httpMethod}}{{/lowercase}}(builder /* TODO initialize params and uncomment ,{{#formParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/formParams}}{{#bodyParams}}{{paramName}}{{/bodyParams}}*/);

        CompletableFuture<{{#returnType}}{{returnType}}{{#isListContainer}}<{{returnBaseType}}>{{/isListContainer}}{{#isMapContainer}}<String, {{returnBaseType}}>{{/isMapContainer}}{{/returnType}}{{^returnType}}HttpResponse<String>{{/returnType}}> wrongResponse = sendAsync(request){{#returnType}}.thenApply(this::responseChecker).thenCompose(Utilities.deserialize{{#isMapContainer}}Map({{returnBaseType}}.class)){{/isMapContainer}}{{^isMapContainer}}{{#isListContainer}}Many{{/isListContainer}}{{^isListContainer}}One{{/isListContainer}}({{returnBaseType}}.class)){{/isMapContainer}}{{/returnType}};
        // TODO: test validations

    }
{{/operation}}{{/operations}}

    private CompletableFuture<HttpResponse<String>> sendAsync(HttpRequest request) {
        return client.sendAsync(request, BodyHandlers.ofString());
    }

    private String responseChecker(HttpResponse<String> response) {
        if (response.statusCode() == 200)
            return response.body();
        else
            throw new RemoteException(String.format("Unexpected response while %s %s: %d", response.request().method(), response.uri(), response.statusCode()));
    }

    private HttpRequest.Builder createRequest(){
        return HttpRequest.newBuilder()
                .uri(URI.create(this.uri));
    }

    private HttpRequest get(HttpRequest.Builder builder){
        return builder.GET()
                .build();
    }

    private HttpRequest post(HttpRequest.Builder builder, Object object){
        return builder.POST(BodyPublishers.ofString(Utilities.serializeOne(object)))
                .build();
    }

    private HttpRequest post(HttpRequest.Builder builder, Object... objects){
        var request = builder.header("Content-Type", "multipart/form-data");
        for (Object o: objects)
            request.POST(BodyPublishers.ofString(Utilities.serializeOne(o)));
        return request.build();
    }

    private HttpRequest put(HttpRequest.Builder builder, Object object){
        return builder.PUT(BodyPublishers.ofString(Utilities.serializeOne(object)))
                .build();
    }

    private HttpRequest put(HttpRequest.Builder builder, Object... objects){
        var request = builder.header("Content-Type", "multipart/form-data");
        for (Object o: objects)
            request.PUT(BodyPublishers.ofString(Utilities.serializeOne(o)));
        return request.build();
    }

    private HttpRequest delete(HttpRequest.Builder builder){
        return builder.DELETE()
                .build();
    }
}