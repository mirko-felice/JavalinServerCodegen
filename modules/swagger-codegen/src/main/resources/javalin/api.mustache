package {{package}};

{{#imports}}import {{import}};
{{/imports}}
import io.javalin.http.Context;
import io.javalin.core.validation.JavalinValidation;
import java.util.Collections;

public class {{classname}} {

    private final String basePath;
    private int code;
    private boolean isCodeSet = false;

    public {{classname}}(final String basePath) {
        this.basePath = Objects.requireNonNull(basePath);
    }

    public void registerRoutes(Javalin server) {
    {{#operations}}
    {{#operation}}
        server.{{#lowercase}}{{httpMethod}}{{/lowercase}}(this.basePath + "{{path}}".replace("{",":").replace("}",""), this::{{operationId}});
    {{/operation}}
    {{/operations}}
    }
    {{#operations}}{{#operation}}   {{#isDeprecated}}@Deprecated{{/isDeprecated}}
    public void {{#operationId}}{{operationId}}{{/operationId}}{{^operationId}}{{#lowercase}}{{httpMethod}}{{/lowercase}}{{path}}{{/operationId}}(Context context) throws WrongExecutionSequenceException {
        // Path params
        {{#pathParams}}
        {{dataType}}{{#isListContainer}}<{{baseType}}>{{/isListContainer}} {{baseName}} = context.pathParam("{{baseName}}", {{dataType}}.class).get();
        {{/pathParams}}

        // Query params
        {{#queryParams}}
        {{dataType}}{{#isListContainer}}<{{baseType}}>{{/isListContainer}} {{baseName}} = context.queryParam{{#isListContainer}}s{{/isListContainer}}("{{baseName}}"{{#isListContainer}});{{/isListContainer}}{{^isListContainer}}, {{dataType}}.class{{#defaultValue}}, "{{{defaultValue}}}"{{/defaultValue}}).get{{^required}}OrNull{{/required}}();{{/isListContainer}}
        {{/queryParams}}

        // Form params
        {{#formParams}}
        {{dataType}}{{#isListContainer}}<{{baseType}}>{{/isListContainer}} {{baseName}} = context.formParam("{{baseName}}"{{#isContainer}});{{/isContainer}}{{^isContainer}}, {{dataType}}.class{{#defaultValue}}, "{{{defaultValue}}}"{{/defaultValue}}).get{{^required}}OrNull{{/required}}();{{/isContainer}}
        {{/formParams}}

        // Headers
        {{#headerParams}}
        {{dataType}}{{#isListContainer}}<{{baseType}}>{{/isListContainer}} {{baseName}} = context.formParam("{{baseName}}"{{#isContainer}});{{/isContainer}}{{^isContainer}}, {{dataType}}.class{{#defaultValue}}, "{{{defaultValue}}}"{{/defaultValue}}).get{{^required}}OrNull{{/required}}();{{/isContainer}}
        {{/headerParams}}

        context.contentType("{{#produces}}{{mediaType}}{{#hasMore}}; {{/hasMore}}{{/produces}}");

        {{#responses}}
        {{#dataType}}
        CompletableFuture<{{dataType}}{{#isListContainer}}<{{baseType}}>{{/isListContainer}}{{#isMapContainer}}<String, {{baseType}}>{{/isMapContainer}}> result = new CompletableFuture<>();
        if (!this.isCodeSet)
            throw new WrongExecutionSequenceException("Code not setted!");
        this.isCodeSet = false;
        {{/dataType}}
        {{/responses}}
        switch (this.code){
        {{#responses}}
            case {{code}}:
                {{#dataType}}context.result(result);{{/dataType}}{{^dataType}}context.result("{{message}}");{{/dataType}}
                break;
        {{/responses}}
            default:
        }
        this.isCodeSet = false;
    }
    {{/operation}}
    {{/operations}}

    public final void setCode(int code) {
        this.code = code;
        this.isCodeSet = true;
    }

    class WrongExecutionSequenceException extends Exception {
        public WrongExecutionSequenceException(String message) { super(message); }
    }
}